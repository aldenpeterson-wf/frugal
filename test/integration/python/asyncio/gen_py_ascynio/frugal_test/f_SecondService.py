#
# Autogenerated by Frugal Compiler (1.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#



import asyncio
from datetime import timedelta
import inspect

from frugal.aio.processor import FBaseProcessor
from frugal.aio.processor import FProcessorFunction
from frugal.aio.registry import FClientRegistry
from frugal.middleware import Method
from thrift.Thrift import TApplicationException
from thrift.Thrift import TMessageType
from frugal_test.SecondService import *
from frugal_test.ttypes import *


class Iface(object):

    async def blahBlah(self, ctx):
        """
        Args:
            ctx: FContext
        """
        pass

    async def secondtestString(self, ctx, thing):
        """
        Args:
            ctx: FContext
            thing: string
        """
        pass


class Client(Iface):

    def __init__(self, transport, protocol_factory, middleware=None):
        """
        Create a new Client with a transport and protocol factory.

        Args:
            transport: FTransport
            protocol_factory: FProtocolFactory
            middleware: ServiceMiddleware or list of ServiceMiddleware
        """
        if middleware and not isinstance(middleware, list):
            middleware = [middleware]
        transport.set_registry(FClientRegistry())
        self._transport = transport
        self._protocol_factory = protocol_factory
        self._oprot = protocol_factory.get_protocol(transport)
        self._write_lock = asyncio.Lock()
        self._methods = {
            'blahBlah': Method(self._blahBlah, middleware),
            'secondtestString': Method(self._secondtestString, middleware),
        }

    async def blahBlah(self, ctx):
        """
        Args:
            ctx: FContext
        """
        return await self._methods['blahBlah']([ctx])

    async def _blahBlah(self, ctx):
        timeout = ctx.get_timeout() / 1000.0
        future = asyncio.Future()
        timed_future = asyncio.wait_for(future, timeout)
        await self._transport.register(ctx, self._recv_blahBlah(ctx, future))
        await self._send_blahBlah(ctx)

        try:
            result = await timed_future
        finally:
            await self._transport.unregister(ctx)
        return result

    async def _send_blahBlah(self, ctx):
        oprot = self._oprot
        async with self._write_lock:
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('blahBlah', TMessageType.CALL, 0)
            args = blahBlah_args()
            args.write(oprot)
            oprot.writeMessageEnd()
            await oprot.get_transport().flush()

    def _recv_blahBlah(self, ctx, future):
        def blahBlah_callback(transport):
            iprot = self._protocol_factory.get_protocol(transport)
            iprot.read_response_headers(ctx)
            _, mtype, _ = iprot.readMessageBegin()
            if mtype == TMessageType.EXCEPTION:
                x = TApplicationException()
                x.read(iprot)
                iprot.readMessageEnd()
                future.set_exception(x)
                raise x
            result = blahBlah_result()
            result.read(iprot)
            iprot.readMessageEnd()
            future.set_result(None)
        return blahBlah_callback

    async def secondtestString(self, ctx, thing):
        """
        Args:
            ctx: FContext
            thing: string
        """
        return await self._methods['secondtestString']([ctx, thing])

    async def _secondtestString(self, ctx, thing):
        timeout = ctx.get_timeout() / 1000.0
        future = asyncio.Future()
        timed_future = asyncio.wait_for(future, timeout)
        await self._transport.register(ctx, self._recv_secondtestString(ctx, future))
        await self._send_secondtestString(ctx, thing)

        try:
            result = await timed_future
        finally:
            await self._transport.unregister(ctx)
        return result

    async def _send_secondtestString(self, ctx, thing):
        oprot = self._oprot
        async with self._write_lock:
            oprot.write_request_headers(ctx)
            oprot.writeMessageBegin('secondtestString', TMessageType.CALL, 0)
            args = secondtestString_args()
            args.thing = thing
            args.write(oprot)
            oprot.writeMessageEnd()
            await oprot.get_transport().flush()

    def _recv_secondtestString(self, ctx, future):
        def secondtestString_callback(transport):
            iprot = self._protocol_factory.get_protocol(transport)
            iprot.read_response_headers(ctx)
            _, mtype, _ = iprot.readMessageBegin()
            if mtype == TMessageType.EXCEPTION:
                x = TApplicationException()
                x.read(iprot)
                iprot.readMessageEnd()
                future.set_exception(x)
                raise x
            result = secondtestString_result()
            result.read(iprot)
            iprot.readMessageEnd()
            if result.success is not None:
                future.set_result(result.success)
                return
            x = TApplicationException(TApplicationException.MISSING_RESULT, "secondtestString failed: unknown result")
            future.set_exception(x)
            raise x
        return secondtestString_callback


class Processor(FBaseProcessor):

    def __init__(self, handler):
        """
        Create a new Processor.

        Args:
            handler: Iface
        """
        super(Processor, self).__init__()
        self.add_to_processor_map('blahBlah', _blahBlah(handler, self.get_write_lock()))
        self.add_to_processor_map('secondtestString', _secondtestString(handler, self.get_write_lock()))


class _blahBlah(FProcessorFunction):

    def __init__(self, handler, lock):
        self._handler = handler
        self._write_lock = lock

    async def process(self, ctx, iprot, oprot):
        args = blahBlah_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = blahBlah_result()
        ret = self._handler.blahBlah(ctx)
        if inspect.iscoroutine(ret):
            ret = await ret
        async with self._write_lock:
            oprot.write_response_headers(ctx)
            oprot.writeMessageBegin('blahBlah', TMessageType.REPLY, 0)
            result.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()


class _secondtestString(FProcessorFunction):

    def __init__(self, handler, lock):
        self._handler = handler
        self._write_lock = lock

    async def process(self, ctx, iprot, oprot):
        args = secondtestString_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = secondtestString_result()
        ret = self._handler.secondtestString(ctx, args.thing)
        if inspect.iscoroutine(ret):
            ret = await ret
        result.success = ret
        async with self._write_lock:
            oprot.write_response_headers(ctx)
            oprot.writeMessageBegin('secondtestString', TMessageType.REPLY, 0)
            result.write(oprot)
            oprot.writeMessageEnd()
            oprot.get_transport().flush()


