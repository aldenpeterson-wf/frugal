// Autogenerated by Frugal Compiler (1.18.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package valid

import (
	"bytes"
	"fmt"
	"sync"
	"time"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal/lib/go"
	"github.com/Workiva/frugal/test/out/ValidTypes"
	"github.com/Workiva/frugal/test/out/excepts"
	"github.com/Workiva/frugal/test/out/validStructs"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// This is a service docstring.
type FBlah interface {
	// Use this to ping the server.
	Ping(ctx *frugal.FContext) (err error)
	// Use this to tell the server how you feel.
	Bleh(ctx *frugal.FContext, one *Thing, Two *Stuff, custom_ints []int32) (r int64, err error)
	GetThing(ctx *frugal.FContext) (r *validStructs.Thing, err error)
	GetMyInt(ctx *frugal.FContext) (r ValidTypes.MyInt, err error)
}

// This is a service docstring.
type FBlahClient struct {
	transport       frugal.FTransport
	protocolFactory *frugal.FProtocolFactory
	oprot           *frugal.FProtocol
	mu              sync.Mutex
	methods         map[string]*frugal.Method
}

func NewFBlahClient(t frugal.FTransport, p *frugal.FProtocolFactory, middleware ...frugal.ServiceMiddleware) *FBlahClient {
	t.SetRegistry(frugal.NewFClientRegistry())
	methods := make(map[string]*frugal.Method)
	client := &FBlahClient{
		transport:       t,
		protocolFactory: p,
		oprot:           p.GetProtocol(t),
		methods:         methods,
	}
	methods["ping"] = frugal.NewMethod(client, client.ping, "ping", middleware)
	methods["bleh"] = frugal.NewMethod(client, client.bleh, "bleh", middleware)
	methods["getThing"] = frugal.NewMethod(client, client.getThing, "getThing", middleware)
	methods["getMyInt"] = frugal.NewMethod(client, client.getMyInt, "getMyInt", middleware)
	return client
}

// Do Not Use. To be called only by generated code.
func (f *FBlahClient) GetWriteMutex() *sync.Mutex {
	return &f.mu
}

// Use this to ping the server.
func (f *FBlahClient) Ping(ctx *frugal.FContext) (err error) {
	ret := f.methods["ping"].Invoke([]interface{}{ctx})
	if len(ret) != 1 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 1", len(ret)))
	}
	if ret[0] != nil {
		err = ret[0].(error)
	}
	return err
}

func (f *FBlahClient) ping(ctx *frugal.FContext) (err error) {
	errorC := make(chan error, 1)
	resultC := make(chan struct{}, 1)
	if err = f.transport.Register(ctx, f.recvPingHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.GetWriteMutex().Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("ping", thrift.CALL, 0); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	args := BlahPingArgs{}
	if err = args.Write(f.oprot); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	f.GetWriteMutex().Unlock()

	select {
	case err = <-errorC:
	case <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FBlahClient) recvPingHandler(ctx *frugal.FContext, resultC chan<- struct{}, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "ping" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
			errorC <- err
			return err
		}
		result := BlahPingResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		resultC <- struct{}{}
		return nil
	}
}

// Use this to tell the server how you feel.
func (f *FBlahClient) Bleh(ctx *frugal.FContext, one *Thing, two *Stuff, custom_ints []int32) (r int64, err error) {
	ret := f.methods["bleh"].Invoke([]interface{}{ctx, one, two, custom_ints})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	r = ret[0].(int64)
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FBlahClient) bleh(ctx *frugal.FContext, one *Thing, two *Stuff, custom_ints []int32) (r int64, err error) {
	errorC := make(chan error, 1)
	resultC := make(chan int64, 1)
	if err = f.transport.Register(ctx, f.recvBlehHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.GetWriteMutex().Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("bleh", thrift.CALL, 0); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	args := BlahBlehArgs{
		One:        one,
		Two:        two,
		CustomInts: custom_ints,
	}
	if err = args.Write(f.oprot); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	f.GetWriteMutex().Unlock()

	select {
	case err = <-errorC:
	case r = <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FBlahClient) recvBlehHandler(ctx *frugal.FContext, resultC chan<- int64, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "bleh" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "bleh failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "bleh failed: invalid message type")
			errorC <- err
			return err
		}
		result := BlahBlehResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		if result.Oops != nil {
			errorC <- result.Oops
			return nil
		}
		if result.Err2 != nil {
			errorC <- result.Err2
			return nil
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

func (f *FBlahClient) GetThing(ctx *frugal.FContext) (r *validStructs.Thing, err error) {
	ret := f.methods["getThing"].Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	r = ret[0].(*validStructs.Thing)
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FBlahClient) getThing(ctx *frugal.FContext) (r *validStructs.Thing, err error) {
	errorC := make(chan error, 1)
	resultC := make(chan *validStructs.Thing, 1)
	if err = f.transport.Register(ctx, f.recvGetThingHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.GetWriteMutex().Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("getThing", thrift.CALL, 0); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	args := BlahGetThingArgs{}
	if err = args.Write(f.oprot); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	f.GetWriteMutex().Unlock()

	select {
	case err = <-errorC:
	case r = <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FBlahClient) recvGetThingHandler(ctx *frugal.FContext, resultC chan<- *validStructs.Thing, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "getThing" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getThing failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getThing failed: invalid message type")
			errorC <- err
			return err
		}
		result := BlahGetThingResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

func (f *FBlahClient) GetMyInt(ctx *frugal.FContext) (r ValidTypes.MyInt, err error) {
	ret := f.methods["getMyInt"].Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	r = ret[0].(ValidTypes.MyInt)
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FBlahClient) getMyInt(ctx *frugal.FContext) (r ValidTypes.MyInt, err error) {
	errorC := make(chan error, 1)
	resultC := make(chan ValidTypes.MyInt, 1)
	if err = f.transport.Register(ctx, f.recvGetMyIntHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.GetWriteMutex().Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("getMyInt", thrift.CALL, 0); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	args := BlahGetMyIntArgs{}
	if err = args.Write(f.oprot); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	f.GetWriteMutex().Unlock()

	select {
	case err = <-errorC:
	case r = <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FBlahClient) recvGetMyIntHandler(ctx *frugal.FContext, resultC chan<- ValidTypes.MyInt, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "getMyInt" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getMyInt failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getMyInt failed: invalid message type")
			errorC <- err
			return err
		}
		result := BlahGetMyIntResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

type FBlahProcessor struct {
	*frugal.FBaseProcessor
}

func NewFBlahProcessor(handler FBlah, middleware ...frugal.ServiceMiddleware) *FBlahProcessor {
	p := &FBlahProcessor{frugal.NewFBaseProcessor()}
	p.AddToProcessorMap("ping", &blahFPing{handler: frugal.NewMethod(handler, handler.Ping, "Ping", middleware), writeMu: p.GetWriteMutex()})
	p.AddToProcessorMap("bleh", &blahFBleh{handler: frugal.NewMethod(handler, handler.Bleh, "Bleh", middleware), writeMu: p.GetWriteMutex()})
	p.AddToProcessorMap("getThing", &blahFGetThing{handler: frugal.NewMethod(handler, handler.GetThing, "GetThing", middleware), writeMu: p.GetWriteMutex()})
	p.AddToProcessorMap("getMyInt", &blahFGetMyInt{handler: frugal.NewMethod(handler, handler.GetMyInt, "GetMyInt", middleware), writeMu: p.GetWriteMutex()})
	return p
}

type blahFPing struct {
	handler *frugal.Method
	writeMu *sync.Mutex
}

func (p *blahFPing) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := BlahPingArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.writeMu.Lock()
		blahWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "ping", err.Error())
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := BlahPingResult{}
	var err2 error
	ret := p.handler.Invoke([]interface{}{ctx})
	if len(ret) != 1 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 1", len(ret)))
	}
	if ret[0] != nil {
		err2 = ret[0].(error)
	}
	if err2 != nil {
		p.writeMu.Lock()
		blahWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "ping", "Internal error processing ping: "+err2.Error())
		p.writeMu.Unlock()
		return err2
	}
	p.writeMu.Lock()
	defer p.writeMu.Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "ping", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type blahFBleh struct {
	handler *frugal.Method
	writeMu *sync.Mutex
}

func (p *blahFBleh) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := BlahBlehArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.writeMu.Lock()
		blahWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "bleh", err.Error())
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := BlahBlehResult{}
	var err2 error
	var retval int64
	ret := p.handler.Invoke([]interface{}{ctx, args.One, args.Two, args.CustomInts})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	retval = ret[0].(int64)
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		switch v := err2.(type) {
		case *InvalidOperation:
			result.Oops = v
		case *excepts.InvalidData:
			result.Err2 = v
		default:
			p.writeMu.Lock()
			blahWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "bleh", "Internal error processing bleh: "+err2.Error())
			p.writeMu.Unlock()
			return err2
		}
	} else {
		result.Success = &retval
	}
	p.writeMu.Lock()
	defer p.writeMu.Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "bleh", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("bleh", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "bleh", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "bleh", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "bleh", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "bleh", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type blahFGetThing struct {
	handler *frugal.Method
	writeMu *sync.Mutex
}

func (p *blahFGetThing) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := BlahGetThingArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.writeMu.Lock()
		blahWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "getThing", err.Error())
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := BlahGetThingResult{}
	var err2 error
	var retval *validStructs.Thing
	ret := p.handler.Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	retval = ret[0].(*validStructs.Thing)
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		p.writeMu.Lock()
		blahWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "getThing", "Internal error processing getThing: "+err2.Error())
		p.writeMu.Unlock()
		return err2
	} else {
		result.Success = retval
	}
	p.writeMu.Lock()
	defer p.writeMu.Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getThing", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("getThing", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getThing", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getThing", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getThing", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getThing", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

type blahFGetMyInt struct {
	handler *frugal.Method
	writeMu *sync.Mutex
}

func (p *blahFGetMyInt) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := BlahGetMyIntArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.writeMu.Lock()
		blahWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "getMyInt", err.Error())
		p.writeMu.Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := BlahGetMyIntResult{}
	var err2 error
	var retval ValidTypes.MyInt
	ret := p.handler.Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	retval = ret[0].(ValidTypes.MyInt)
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		p.writeMu.Lock()
		blahWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "getMyInt", "Internal error processing getMyInt: "+err2.Error())
		p.writeMu.Unlock()
		return err2
	} else {
		result.Success = &retval
	}
	p.writeMu.Lock()
	defer p.writeMu.Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getMyInt", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("getMyInt", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getMyInt", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getMyInt", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getMyInt", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			blahWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getMyInt", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

func blahWriteApplicationError(ctx *frugal.FContext, oprot *frugal.FProtocol, type_ int32, method, message string) {
	x := thrift.NewTApplicationException(type_, message)
	oprot.WriteResponseHeader(ctx)
	oprot.WriteMessageBegin(method, thrift.EXCEPTION, 0)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
}
