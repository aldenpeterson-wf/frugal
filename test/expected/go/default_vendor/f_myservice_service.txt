// Autogenerated by Frugal Compiler (2.0.6)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package include_default_vendor

import (
	"bytes"
	"fmt"
	"sync"
	"time"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal/lib/go"
	"github.com/Workiva/frugal/test/out/excepts"
	"github.com/Workiva/frugal/test/out/vendor_namespace"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type FMyService interface {
	GetItem(ctx *frugal.FContext) (r *vendor_namespace.Item, err error)
}

type FMyServiceClient struct {
	transport       frugal.FTransport
	protocolFactory *frugal.FProtocolFactory
	oprot           *frugal.FProtocol
	mu              sync.Mutex
	methods         map[string]*frugal.Method
}

func NewFMyServiceClient(t frugal.FTransport, p *frugal.FProtocolFactory, middleware ...frugal.ServiceMiddleware) *FMyServiceClient {
	t.SetRegistry(frugal.NewFClientRegistry())
	methods := make(map[string]*frugal.Method)
	client := &FMyServiceClient{
		transport:       t,
		protocolFactory: p,
		oprot:           p.GetProtocol(t),
		methods:         methods,
	}
	methods["getItem"] = frugal.NewMethod(client, client.getItem, "getItem", middleware)
	return client
}

// Do Not Use. To be called only by generated code.
func (f *FMyServiceClient) GetWriteMutex() *sync.Mutex {
	return &f.mu
}

func (f *FMyServiceClient) GetItem(ctx *frugal.FContext) (r *vendor_namespace.Item, err error) {
	ret := f.methods["getItem"].Invoke([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	r = ret[0].(*vendor_namespace.Item)
	if ret[1] != nil {
		err = ret[1].(error)
	}
	return r, err
}

func (f *FMyServiceClient) getItem(ctx *frugal.FContext) (r *vendor_namespace.Item, err error) {
	errorC := make(chan error, 1)
	resultC := make(chan *vendor_namespace.Item, 1)
	if err = f.transport.Register(ctx, f.recvGetItemHandler(ctx, resultC, errorC)); err != nil {
		return
	}
	defer f.transport.Unregister(ctx)
	f.GetWriteMutex().Lock()
	if err = f.oprot.WriteRequestHeader(ctx); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageBegin("getItem", thrift.CALL, 0); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	args := MyServiceGetItemArgs{}
	if err = args.Write(f.oprot); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.WriteMessageEnd(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	if err = f.oprot.Flush(); err != nil {
		f.GetWriteMutex().Unlock()
		return
	}
	f.GetWriteMutex().Unlock()

	select {
	case err = <-errorC:
	case r = <-resultC:
	case <-time.After(ctx.Timeout()):
		err = frugal.ErrTimeout
	case <-f.transport.Closed():
		err = frugal.ErrTransportClosed
	}
	return
}

func (f *FMyServiceClient) recvGetItemHandler(ctx *frugal.FContext, resultC chan<- *vendor_namespace.Item, errorC chan<- error) frugal.FAsyncCallback {
	return func(tr thrift.TTransport) error {
		iprot := f.protocolFactory.GetProtocol(tr)
		if err := iprot.ReadResponseHeader(ctx); err != nil {
			errorC <- err
			return err
		}
		method, mTypeId, _, err := iprot.ReadMessageBegin()
		if err != nil {
			errorC <- err
			return err
		}
		if method != "getItem" {
			err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getItem failed: wrong method name")
			errorC <- err
			return err
		}
		if mTypeId == thrift.EXCEPTION {
			error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
			var error1 thrift.TApplicationException
			error1, err = error0.Read(iprot)
			if err != nil {
				errorC <- err
				return err
			}
			if err = iprot.ReadMessageEnd(); err != nil {
				errorC <- err
				return err
			}
			if error1.TypeId() == frugal.RESPONSE_TOO_LARGE {
				err = thrift.NewTTransportException(frugal.RESPONSE_TOO_LARGE, "response too large for transport")
				errorC <- err
				return nil
			}
			if error1.TypeId() == frugal.RATE_LIMIT_EXCEEDED {
				err = frugal.ErrRateLimitExceeded
				errorC <- err
				return nil
			}
			err = error1
			errorC <- err
			return err
		}
		if mTypeId != thrift.REPLY {
			err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getItem failed: invalid message type")
			errorC <- err
			return err
		}
		result := MyServiceGetItemResult{}
		if err = result.Read(iprot); err != nil {
			errorC <- err
			return err
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			errorC <- err
			return err
		}
		if result.D != nil {
			errorC <- result.D
			return nil
		}
		resultC <- result.GetSuccess()
		return nil
	}
}

type FMyServiceProcessor struct {
	*frugal.FBaseProcessor
}

func NewFMyServiceProcessor(handler FMyService, middleware ...frugal.ServiceMiddleware) *FMyServiceProcessor {
	p := &FMyServiceProcessor{frugal.NewFBaseProcessor()}
	p.AddToProcessorMap("getItem", &myserviceFGetItem{frugal.NewFBaseProcessorFunction(p.GetWriteMutex(), frugal.NewMethod(handler, handler.GetItem, "GetItem", middleware))})
	return p
}

type myserviceFGetItem struct {
	*frugal.FBaseProcessorFunction
}

func (p *myserviceFGetItem) Process(ctx *frugal.FContext, iprot, oprot *frugal.FProtocol) error {
	args := MyServiceGetItemArgs{}
	var err error
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		p.GetWriteMutex().Lock()
		myserviceWriteApplicationError(ctx, oprot, thrift.PROTOCOL_ERROR, "getItem", err.Error())
		p.GetWriteMutex().Unlock()
		return err
	}

	iprot.ReadMessageEnd()
	result := MyServiceGetItemResult{}
	var err2 error
	ret := p.InvokeMethod([]interface{}{ctx})
	if len(ret) != 2 {
		panic(fmt.Sprintf("Middleware returned %d arguments, expected 2", len(ret)))
	}
	if ret[1] != nil {
		err2 = ret[1].(error)
	}
	if err2 != nil {
		if err2 == frugal.ErrRateLimitExceeded {
			p.GetWriteMutex().Lock()
			myserviceWriteApplicationError(ctx, oprot, frugal.RATE_LIMIT_EXCEEDED, "getItem", "Rate limit exceeded")
			p.GetWriteMutex().Unlock()
			return nil
		}
		switch v := err2.(type) {
		case *excepts.InvalidData:
			result.D = v
		default:
			p.GetWriteMutex().Lock()
			myserviceWriteApplicationError(ctx, oprot, thrift.INTERNAL_ERROR, "getItem", "Internal error processing getItem: "+err2.Error())
			p.GetWriteMutex().Unlock()
			return err2
		}
	} else {
		var retval *vendor_namespace.Item = ret[0].(*vendor_namespace.Item)
		result.Success = retval
	}
	p.GetWriteMutex().Lock()
	defer p.GetWriteMutex().Unlock()
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			myserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getItem", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("getItem", thrift.REPLY, 0); err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			myserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getItem", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			myserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getItem", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			myserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getItem", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		if frugal.IsErrTooLarge(err2) {
			myserviceWriteApplicationError(ctx, oprot, frugal.RESPONSE_TOO_LARGE, "getItem", "response too large: "+err2.Error())
			return nil
		}
		err = err2
	}
	return err
}

func myserviceWriteApplicationError(ctx *frugal.FContext, oprot *frugal.FProtocol, type_ int32, method, message string) {
	x := thrift.NewTApplicationException(type_, message)
	oprot.WriteResponseHeader(ctx)
	oprot.WriteMessageBegin(method, thrift.EXCEPTION, 0)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
}
