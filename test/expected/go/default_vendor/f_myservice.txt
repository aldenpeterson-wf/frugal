// Autogenerated by Frugal Compiler (2.0.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package include_default_vendor

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal/test/out/excepts"
	"github.com/Workiva/frugal/test/out/vendor_namespace"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = vendor_namespace.GoUnusedProtection__
var _ = excepts.GoUnusedProtection__

type MyServiceGetItemArgs struct {
}

func NewMyServiceGetItemArgs() *MyServiceGetItemArgs {
	return &MyServiceGetItemArgs{}
}

func (p *MyServiceGetItemArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MyServiceGetItemArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MyServiceGetItemArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceGetItemArgs(%+v)", *p)
}

type MyServiceGetItemResult struct {
	Success *vendor_namespace.Item `thrift:"success,0" db:"success" json:"success,omitempty"`
	D       *excepts.InvalidData   `thrift:"d,1" db:"d" json:"d,omitempty"`
}

func NewMyServiceGetItemResult() *MyServiceGetItemResult {
	return &MyServiceGetItemResult{}
}

var MyServiceGetItemResult_Success_DEFAULT *vendor_namespace.Item

func (p *MyServiceGetItemResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MyServiceGetItemResult) GetSuccess() *vendor_namespace.Item {
	if !p.IsSetSuccess() {
		return MyServiceGetItemResult_Success_DEFAULT
	}
	return p.Success
}

var MyServiceGetItemResult_D_DEFAULT *excepts.InvalidData

func (p *MyServiceGetItemResult) IsSetD() bool {
	return p.D != nil
}

func (p *MyServiceGetItemResult) GetD() *excepts.InvalidData {
	if !p.IsSetD() {
		return MyServiceGetItemResult_D_DEFAULT
	}
	return p.D
}

func (p *MyServiceGetItemResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MyServiceGetItemResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = vendor_namespace.NewItem()
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *MyServiceGetItemResult) ReadField1(iprot thrift.TProtocol) error {
	p.D = excepts.NewInvalidData()
	if err := p.D.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.D), err)
	}
	return nil
}

func (p *MyServiceGetItemResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getItem_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MyServiceGetItemResult) writeField0(oprot thrift.TProtocol) error {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return nil
}

func (p *MyServiceGetItemResult) writeField1(oprot thrift.TProtocol) error {
	if p.IsSetD() {
		if err := oprot.WriteFieldBegin("d", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:d: ", p), err)
		}
		if err := p.D.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.D), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:d: ", p), err)
		}
	}
	return nil
}

func (p *MyServiceGetItemResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MyServiceGetItemResult(%+v)", *p)
}
