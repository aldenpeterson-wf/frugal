/**
 * Autogenerated by Frugal Compiler (1.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */
package example;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Generated(value = "Autogenerated by Frugal Compiler (1.16.0)")
public class Foo {
public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
	}

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
	}

	public ping_args() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ping_args(ping_args other) {
	}

	public ping_args deepCopy() {
		return new ping_args(this);
	}

	@Override
	public void clear() {
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ping_args)
			return this.equals((ping_args)that);
		return false;
	}

	public boolean equals(ping_args that) {
		if (that == null)
			return false;

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		return list.hashCode();
	}

	@Override
	public int compareTo(ping_args other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ping_args(");
		boolean first = true;

		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ping_argsStandardSchemeFactory implements SchemeFactory {
		public ping_argsStandardScheme getScheme() {
			return new ping_argsStandardScheme();
		}
	}

	private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ping_argsTupleSchemeFactory implements SchemeFactory {
		public ping_argsTupleScheme getScheme() {
			return new ping_argsTupleScheme();
		}
	}

	private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
		}

	}

}
public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");


	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
		schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
	}

	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
	}

	public ping_result() {
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public ping_result(ping_result other) {
	}

	public ping_result deepCopy() {
		return new ping_result(this);
	}

	@Override
	public void clear() {
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof ping_result)
			return this.equals((ping_result)that);
		return false;
	}

	public boolean equals(ping_result that) {
		if (that == null)
			return false;

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		return list.hashCode();
	}

	@Override
	public int compareTo(ping_result other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("ping_result(");
		boolean first = true;

		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class ping_resultStandardSchemeFactory implements SchemeFactory {
		public ping_resultStandardScheme getScheme() {
			return new ping_resultStandardScheme();
		}
	}

	private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class ping_resultTupleSchemeFactory implements SchemeFactory {
		public ping_resultTupleScheme getScheme() {
			return new ping_resultTupleScheme();
		}
	}

	private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
		}

	}

}
public static class blah_args implements org.apache.thrift.TBase<blah_args, blah_args._Fields>, java.io.Serializable, Cloneable, Comparable<blah_args> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blah_args");

	private static final org.apache.thrift.protocol.TField NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("num", org.apache.thrift.protocol.TType.I32, (short)1);
	private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("Str", org.apache.thrift.protocol.TType.STRING, (short)2);
	private static final org.apache.thrift.protocol.TField EVENT_FIELD_DESC = new org.apache.thrift.protocol.TField("event", org.apache.thrift.protocol.TType.STRUCT, (short)3);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new blah_argsStandardSchemeFactory());
		schemes.put(TupleScheme.class, new blah_argsTupleSchemeFactory());
	}

	public int num; // required
	public String Str; // required
	public Event event; // required
	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		NUM((short)1, "num"),
		STR((short)2, "Str"),
		EVENT((short)3, "event")
;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 1: // NUM
					return NUM;
				case 2: // STR
					return STR;
				case 3: // EVENT
					return EVENT;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __NUM_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.NUM, new org.apache.thrift.meta_data.FieldMetaData("num", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("Str", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.EVENT, new org.apache.thrift.meta_data.FieldMetaData("event", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Event.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(blah_args.class, metaDataMap);
	}

	public blah_args() {
	}

	public blah_args(
		int num,
		String Str,
		Event event) {
		this();
		this.num = num;
		setNumIsSet(true);
		this.Str = Str;
		this.event = event;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public blah_args(blah_args other) {
		__isset_bitfield = other.__isset_bitfield;
		this.num = other.num;
		if (other.isSetStr()) {
			this.Str = other.Str;
		}
		if (other.isSetEvent()) {
			this.event = new Event(other.event);
		}
	}

	public blah_args deepCopy() {
		return new blah_args(this);
	}

	@Override
	public void clear() {
		setNumIsSet(false);
		this.num = 0;

		this.Str = null;

		this.event = null;

	}

	public int getNum() {
		return this.num;
	}

	public blah_args setNum(int num) {
		this.num = num;
		setNumIsSet(true);
		return this;
	}

	public void unsetNum() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ISSET_ID);
	}

	/** Returns true if field num is set (has been assigned a value) and false otherwise */
	public boolean isSetNum() {
		return EncodingUtils.testBit(__isset_bitfield, __NUM_ISSET_ID);
	}

	public void setNumIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ISSET_ID, value);
	}

	public String getStr() {
		return this.Str;
	}

	public blah_args setStr(String Str) {
		this.Str = Str;
		return this;
	}

	public void unsetStr() {
		this.Str = null;
	}

	/** Returns true if field Str is set (has been assigned a value) and false otherwise */
	public boolean isSetStr() {
		return this.Str != null;
	}

	public void setStrIsSet(boolean value) {
		if (!value) {
			this.Str = null;
		}
	}

	public Event getEvent() {
		return this.event;
	}

	public blah_args setEvent(Event event) {
		this.event = event;
		return this;
	}

	public void unsetEvent() {
		this.event = null;
	}

	/** Returns true if field event is set (has been assigned a value) and false otherwise */
	public boolean isSetEvent() {
		return this.event != null;
	}

	public void setEventIsSet(boolean value) {
		if (!value) {
			this.event = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case NUM:
			if (value == null) {
				unsetNum();
			} else {
				setNum((Integer)value);
			}
			break;

		case STR:
			if (value == null) {
				unsetStr();
			} else {
				setStr((String)value);
			}
			break;

		case EVENT:
			if (value == null) {
				unsetEvent();
			} else {
				setEvent((Event)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case NUM:
			return getNum();

		case STR:
			return getStr();

		case EVENT:
			return getEvent();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case NUM:
			return isSetNum();
		case STR:
			return isSetStr();
		case EVENT:
			return isSetEvent();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof blah_args)
			return this.equals((blah_args)that);
		return false;
	}

	public boolean equals(blah_args that) {
		if (that == null)
			return false;

		boolean this_present_num = true;
		boolean that_present_num = true;
		if (this_present_num || that_present_num) {
			if (!(this_present_num && that_present_num))
				return false;
			if (this.num != that.num)
				return false;
		}

		boolean this_present_Str = true && this.isSetStr();
		boolean that_present_Str = true && that.isSetStr();
		if (this_present_Str || that_present_Str) {
			if (!(this_present_Str && that_present_Str))
				return false;
			if (!this.Str.equals(that.Str))
				return false;
		}

		boolean this_present_event = true && this.isSetEvent();
		boolean that_present_event = true && that.isSetEvent();
		if (this_present_event || that_present_event) {
			if (!(this_present_event && that_present_event))
				return false;
			if (!this.event.equals(that.event))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_num = true;
		list.add(present_num);
		if (present_num)
			list.add(num);

		boolean present_Str = true && (isSetStr());
		list.add(present_Str);
		if (present_Str)
			list.add(Str);

		boolean present_event = true && (isSetEvent());
		list.add(present_event);
		if (present_event)
			list.add(event);

		return list.hashCode();
	}

	@Override
	public int compareTo(blah_args other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetNum()).compareTo(other.isSetNum());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNum()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, other.num);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStr()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Str, other.Str);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetEvent()).compareTo(other.isSetEvent());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetEvent()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event, other.event);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("blah_args(");
		boolean first = true;

		sb.append("num:");
		sb.append(this.num);
		first = false;
		if (!first) sb.append(", ");
		sb.append("Str:");
		if (this.Str == null) {
			sb.append("null");
		} else {
			sb.append(this.Str);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("event:");
		if (this.event == null) {
			sb.append("null");
		} else {
			sb.append(this.event);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (event != null) {
			event.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class blah_argsStandardSchemeFactory implements SchemeFactory {
		public blah_argsStandardScheme getScheme() {
			return new blah_argsStandardScheme();
		}
	}

	private static class blah_argsStandardScheme extends StandardScheme<blah_args> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, blah_args struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // NUM
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.num = iprot.readI32();
							struct.setNumIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // STR
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.Str = iprot.readString();
							struct.setStrIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // EVENT
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.event = new Event();
							struct.event.read(iprot);
							struct.setEventIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, blah_args struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(NUM_FIELD_DESC);
			oprot.writeI32(struct.num);
			oprot.writeFieldEnd();
			if (struct.Str != null) {
				oprot.writeFieldBegin(STR_FIELD_DESC);
				oprot.writeString(struct.Str);
				oprot.writeFieldEnd();
			}
			if (struct.event != null) {
				oprot.writeFieldBegin(EVENT_FIELD_DESC);
				struct.event.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class blah_argsTupleSchemeFactory implements SchemeFactory {
		public blah_argsTupleScheme getScheme() {
			return new blah_argsTupleScheme();
		}
	}

	private static class blah_argsTupleScheme extends TupleScheme<blah_args> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, blah_args struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetNum()) {
				optionals.set(0);
			}
			if (struct.isSetStr()) {
				optionals.set(1);
			}
			if (struct.isSetEvent()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetNum()) {
				oprot.writeI32(struct.num);
			}
			if (struct.isSetStr()) {
				oprot.writeString(struct.Str);
			}
			if (struct.isSetEvent()) {
				struct.event.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, blah_args struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.num = iprot.readI32();
				struct.setNumIsSet(true);
			}
			if (incoming.get(1)) {
				struct.Str = iprot.readString();
				struct.setStrIsSet(true);
			}
			if (incoming.get(2)) {
				struct.event = new Event();
				struct.event.read(iprot);
				struct.setEventIsSet(true);
			}
		}

	}

}
public static class blah_result implements org.apache.thrift.TBase<blah_result, blah_result._Fields>, java.io.Serializable, Cloneable, Comparable<blah_result> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blah_result");

	private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
	private static final org.apache.thrift.protocol.TField AWE_FIELD_DESC = new org.apache.thrift.protocol.TField("awe", org.apache.thrift.protocol.TType.STRUCT, (short)1);
	private static final org.apache.thrift.protocol.TField API_FIELD_DESC = new org.apache.thrift.protocol.TField("api", org.apache.thrift.protocol.TType.STRUCT, (short)2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new blah_resultStandardSchemeFactory());
		schemes.put(TupleScheme.class, new blah_resultTupleSchemeFactory());
	}

	public long success; // required
	public AwesomeException awe; // required
	public base.api_exception api; // required
	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		SUCCESS((short)0, "success"),
		AWE((short)1, "awe"),
		API((short)2, "api")
;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				case 1: // AWE
					return AWE;
				case 2: // API
					return API;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __SUCCESS_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.AWE, new org.apache.thrift.meta_data.FieldMetaData("awe", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AwesomeException.class)));
		tmpMap.put(_Fields.API, new org.apache.thrift.meta_data.FieldMetaData("api", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, base.api_exception.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(blah_result.class, metaDataMap);
	}

	public blah_result() {
	}

	public blah_result(
		long success,
		AwesomeException awe,
		base.api_exception api) {
		this();
		this.success = success;
		setSuccessIsSet(true);
		this.awe = awe;
		this.api = api;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public blah_result(blah_result other) {
		__isset_bitfield = other.__isset_bitfield;
		this.success = other.success;
		if (other.isSetAwe()) {
			this.awe = new AwesomeException(other.awe);
		}
		if (other.isSetApi()) {
			this.api = new base.api_exception(other.api);
		}
	}

	public blah_result deepCopy() {
		return new blah_result(this);
	}

	@Override
	public void clear() {
		setSuccessIsSet(false);
		this.success = 0;

		this.awe = null;

		this.api = null;

	}

	public long getSuccess() {
		return this.success;
	}

	public blah_result setSuccess(long success) {
		this.success = success;
		setSuccessIsSet(true);
		return this;
	}

	public void unsetSuccess() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
	}

	/** Returns true if field success is set (has been assigned a value) and false otherwise */
	public boolean isSetSuccess() {
		return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
	}

	public void setSuccessIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
	}

	public AwesomeException getAwe() {
		return this.awe;
	}

	public blah_result setAwe(AwesomeException awe) {
		this.awe = awe;
		return this;
	}

	public void unsetAwe() {
		this.awe = null;
	}

	/** Returns true if field awe is set (has been assigned a value) and false otherwise */
	public boolean isSetAwe() {
		return this.awe != null;
	}

	public void setAweIsSet(boolean value) {
		if (!value) {
			this.awe = null;
		}
	}

	public base.api_exception getApi() {
		return this.api;
	}

	public blah_result setApi(base.api_exception api) {
		this.api = api;
		return this;
	}

	public void unsetApi() {
		this.api = null;
	}

	/** Returns true if field api is set (has been assigned a value) and false otherwise */
	public boolean isSetApi() {
		return this.api != null;
	}

	public void setApiIsSet(boolean value) {
		if (!value) {
			this.api = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case SUCCESS:
			if (value == null) {
				unsetSuccess();
			} else {
				setSuccess((Long)value);
			}
			break;

		case AWE:
			if (value == null) {
				unsetAwe();
			} else {
				setAwe((AwesomeException)value);
			}
			break;

		case API:
			if (value == null) {
				unsetApi();
			} else {
				setApi((base.api_exception)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case SUCCESS:
			return getSuccess();

		case AWE:
			return getAwe();

		case API:
			return getApi();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case SUCCESS:
			return isSetSuccess();
		case AWE:
			return isSetAwe();
		case API:
			return isSetApi();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof blah_result)
			return this.equals((blah_result)that);
		return false;
	}

	public boolean equals(blah_result that) {
		if (that == null)
			return false;

		boolean this_present_success = true;
		boolean that_present_success = true;
		if (this_present_success || that_present_success) {
			if (!(this_present_success && that_present_success))
				return false;
			if (this.success != that.success)
				return false;
		}

		boolean this_present_awe = true && this.isSetAwe();
		boolean that_present_awe = true && that.isSetAwe();
		if (this_present_awe || that_present_awe) {
			if (!(this_present_awe && that_present_awe))
				return false;
			if (!this.awe.equals(that.awe))
				return false;
		}

		boolean this_present_api = true && this.isSetApi();
		boolean that_present_api = true && that.isSetApi();
		if (this_present_api || that_present_api) {
			if (!(this_present_api && that_present_api))
				return false;
			if (!this.api.equals(that.api))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_success = true;
		list.add(present_success);
		if (present_success)
			list.add(success);

		boolean present_awe = true && (isSetAwe());
		list.add(present_awe);
		if (present_awe)
			list.add(awe);

		boolean present_api = true && (isSetApi());
		list.add(present_api);
		if (present_api)
			list.add(api);

		return list.hashCode();
	}

	@Override
	public int compareTo(blah_result other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetSuccess()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAwe()).compareTo(other.isSetAwe());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAwe()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awe, other.awe);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetApi()).compareTo(other.isSetApi());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetApi()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.api, other.api);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("blah_result(");
		boolean first = true;

		sb.append("success:");
		sb.append(this.success);
		first = false;
		if (!first) sb.append(", ");
		sb.append("awe:");
		if (this.awe == null) {
			sb.append("null");
		} else {
			sb.append(this.awe);
		}
		first = false;
		if (!first) sb.append(", ");
		sb.append("api:");
		if (this.api == null) {
			sb.append("null");
		} else {
			sb.append(this.api);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (awe != null) {
			awe.validate();
		}
		if (api != null) {
			api.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class blah_resultStandardSchemeFactory implements SchemeFactory {
		public blah_resultStandardScheme getScheme() {
			return new blah_resultStandardScheme();
		}
	}

	private static class blah_resultStandardScheme extends StandardScheme<blah_result> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, blah_result struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.success = iprot.readI64();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 1: // AWE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.awe = new AwesomeException();
							struct.awe.read(iprot);
							struct.setAweIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // API
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.api = new base.api_exception();
							struct.api.read(iprot);
							struct.setApiIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, blah_result struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.isSetSuccess()) {
				oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
				oprot.writeI64(struct.success);
				oprot.writeFieldEnd();
			}
			if (struct.awe != null) {
				oprot.writeFieldBegin(AWE_FIELD_DESC);
				struct.awe.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.api != null) {
				oprot.writeFieldBegin(API_FIELD_DESC);
				struct.api.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class blah_resultTupleSchemeFactory implements SchemeFactory {
		public blah_resultTupleScheme getScheme() {
			return new blah_resultTupleScheme();
		}
	}

	private static class blah_resultTupleScheme extends TupleScheme<blah_result> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, blah_result struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetSuccess()) {
				optionals.set(0);
			}
			if (struct.isSetAwe()) {
				optionals.set(1);
			}
			if (struct.isSetApi()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetSuccess()) {
				oprot.writeI64(struct.success);
			}
			if (struct.isSetAwe()) {
				struct.awe.write(oprot);
			}
			if (struct.isSetApi()) {
				struct.api.write(oprot);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, blah_result struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.success = iprot.readI64();
				struct.setSuccessIsSet(true);
			}
			if (incoming.get(1)) {
				struct.awe = new AwesomeException();
				struct.awe.read(iprot);
				struct.setAweIsSet(true);
			}
			if (incoming.get(2)) {
				struct.api = new base.api_exception();
				struct.api.read(iprot);
				struct.setApiIsSet(true);
			}
		}

	}

}
public static class oneWay_args implements org.apache.thrift.TBase<oneWay_args, oneWay_args._Fields>, java.io.Serializable, Cloneable, Comparable<oneWay_args> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("oneWay_args");

	private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
	private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.MAP, (short)2);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new oneWay_argsStandardSchemeFactory());
		schemes.put(TupleScheme.class, new oneWay_argsTupleSchemeFactory());
	}

	public long id; // required
	public java.util.Map<Integer, String> req; // required
	/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ID((short)1, "id"),
		REQ((short)2, "req")
;

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch(fieldId) {
				case 1: // ID
					return ID;
				case 2: // REQ
					return REQ;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __ID_ISSET_ID = 0;
	private byte __isset_bitfield = 0;
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64, "id")));
		tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT,
				new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP, "request")));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(oneWay_args.class, metaDataMap);
	}

	public oneWay_args() {
	}

	public oneWay_args(
		long id,
		java.util.Map<Integer, String> req) {
		this();
		this.id = id;
		setIdIsSet(true);
		this.req = req;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public oneWay_args(oneWay_args other) {
		__isset_bitfield = other.__isset_bitfield;
		this.id = other.id;
		if (other.isSetReq()) {
			this.req = new HashMap<Integer,String>(other.req);
		}
	}

	public oneWay_args deepCopy() {
		return new oneWay_args(this);
	}

	@Override
	public void clear() {
		setIdIsSet(false);
		this.id = 0;

		this.req = null;

	}

	public long getId() {
		return this.id;
	}

	public oneWay_args setId(long id) {
		this.id = id;
		setIdIsSet(true);
		return this;
	}

	public void unsetId() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
	}

	/** Returns true if field id is set (has been assigned a value) and false otherwise */
	public boolean isSetId() {
		return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
	}

	public void setIdIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
	}

	public int getReqSize() {
		return (this.req == null) ? 0 : this.req.size();
	}

	public void putToReq(int key, String val) {
		if (this.req == null) {
			this.req = new HashMap<Integer,String>();
		}
		this.req.put(key, val);
	}

	public java.util.Map<Integer, String> getReq() {
		return this.req;
	}

	public oneWay_args setReq(java.util.Map<Integer, String> req) {
		this.req = req;
		return this;
	}

	public void unsetReq() {
		this.req = null;
	}

	/** Returns true if field req is set (has been assigned a value) and false otherwise */
	public boolean isSetReq() {
		return this.req != null;
	}

	public void setReqIsSet(boolean value) {
		if (!value) {
			this.req = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case ID:
			if (value == null) {
				unsetId();
			} else {
				setId((Long)value);
			}
			break;

		case REQ:
			if (value == null) {
				unsetReq();
			} else {
				setReq((java.util.Map<Integer, String>)value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case ID:
			return getId();

		case REQ:
			return getReq();

		}
		throw new IllegalStateException();
	}

	/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case ID:
			return isSetId();
		case REQ:
			return isSetReq();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof oneWay_args)
			return this.equals((oneWay_args)that);
		return false;
	}

	public boolean equals(oneWay_args that) {
		if (that == null)
			return false;

		boolean this_present_id = true;
		boolean that_present_id = true;
		if (this_present_id || that_present_id) {
			if (!(this_present_id && that_present_id))
				return false;
			if (this.id != that.id)
				return false;
		}

		boolean this_present_req = true && this.isSetReq();
		boolean that_present_req = true && that.isSetReq();
		if (this_present_req || that_present_req) {
			if (!(this_present_req && that_present_req))
				return false;
			if (!this.req.equals(that.req))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		List<Object> list = new ArrayList<Object>();

		boolean present_id = true;
		list.add(present_id);
		if (present_id)
			list.add(id);

		boolean present_req = true && (isSetReq());
		list.add(present_req);
		if (present_req)
			list.add(req);

		return list.hashCode();
	}

	@Override
	public int compareTo(oneWay_args other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetId()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetReq()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("oneWay_args(");
		boolean first = true;

		sb.append("id:");
		sb.append(this.id);
		first = false;
		if (!first) sb.append(", ");
		sb.append("req:");
		if (this.req == null) {
			sb.append("null");
		} else {
			sb.append(this.req);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class oneWay_argsStandardSchemeFactory implements SchemeFactory {
		public oneWay_argsStandardScheme getScheme() {
			return new oneWay_argsStandardScheme();
		}
	}

	private static class oneWay_argsStandardScheme extends StandardScheme<oneWay_args> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, oneWay_args struct) throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.id = iprot.readI64();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REQ
						if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
							org.apache.thrift.protocol.TMap elem2 = iprot.readMapBegin();
							struct.req = new HashMap<Integer,String>(2*elem2.size);
							for (int elem3 = 0; elem3 < elem2.size; ++elem3) {
								int elem5 = iprot.readI32();
								String elem4 = iprot.readString();
								struct.req.put(elem5, elem4);
							}
							iprot.readMapEnd();
							struct.setReqIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, oneWay_args struct) throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			oprot.writeFieldBegin(ID_FIELD_DESC);
			oprot.writeI64(struct.id);
			oprot.writeFieldEnd();
			if (struct.req != null) {
				oprot.writeFieldBegin(REQ_FIELD_DESC);
				oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.req.size()));
				for (Map.Entry<Integer, String> elem6 : struct.req.entrySet()) {
					oprot.writeI32(elem6.getKey());
					oprot.writeString(elem6.getValue());
				}
				oprot.writeMapEnd();
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class oneWay_argsTupleSchemeFactory implements SchemeFactory {
		public oneWay_argsTupleScheme getScheme() {
			return new oneWay_argsTupleScheme();
		}
	}

	private static class oneWay_argsTupleScheme extends TupleScheme<oneWay_args> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, oneWay_args struct) throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetId()) {
				optionals.set(0);
			}
			if (struct.isSetReq()) {
				optionals.set(1);
			}
			oprot.writeBitSet(optionals, 2);
			if (struct.isSetId()) {
				oprot.writeI64(struct.id);
			}
			if (struct.isSetReq()) {
				oprot.writeI32(struct.req.size());
				for (Map.Entry<Integer, String> elem7 : struct.req.entrySet()) {
					oprot.writeI32(elem7.getKey());
					oprot.writeString(elem7.getValue());
				}
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, oneWay_args struct) throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(2);
			if (incoming.get(0)) {
				struct.id = iprot.readI64();
				struct.setIdIsSet(true);
			}
			if (incoming.get(1)) {
				org.apache.thrift.protocol.TMap elem8 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
				struct.req = new HashMap<Integer,String>(2*elem8.size);
				for (int elem9 = 0; elem9 < elem8.size; ++elem9) {
					int elem11 = iprot.readI32();
					String elem10 = iprot.readString();
					struct.req.put(elem11, elem10);
				}
				struct.setReqIsSet(true);
			}
		}

	}

}
}
