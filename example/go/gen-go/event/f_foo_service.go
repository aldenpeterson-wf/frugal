// Autogenerated by Frugal Compiler (0.0.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package event

import (
	"bytes"
	"fmt"
	"io"

	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/Workiva/frugal-go"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type FFoo interface {
	// Ping the server.
	Ping(frugal.Context) (err error)
	// Blah the server.
	Blah(frugal.Context, int32, string, *Event) (r int64, err error)
	AsyncBlah(frugal.Context, chan int64, int32, string, *Event) chan error
}

type FFooClient struct {
	TTransport       thrift.TTransport
	FProtocolFactory frugal.FProtocolFactory
	InputProtocol    frugal.FProtocol
	OutputProtocol   frugal.FProtocol
	SeqId            int32
}

func NewFFooClientFactory(t thrift.TTransport, f frugal.FProtocolFactory) *FFooClient {
	return &FFooClient{
		TTransport:       t,
		FProtocolFactory: f,
		InputProtocol:    f.GetProtocol(t),
		OutputProtocol:   f.GetProtocol(t),
		SeqId:            0,
	}
}

func NewFFooClientProtocol(t thrift.TTransport, iprot, oprot frugal.FProtocol) *FFooClient {
	return &FFooClient{
		TTransport:       t,
		FProtocolFactory: nil,
		InputProtocol:    iprot,
		OutputProtocol:   oprot,
		SeqId:            0,
	}
}

// Ping the server.
func (f *FFooClient) Ping(ctx frugal.Context) (err error) {
	if err = f.sendPing(ctx); err != nil {
		return
	}
	return f.recvPing(ctx)
}

func (f *FFooClient) sendPing(ctx frugal.Context) (err error) {
	oprot := f.OutputProtocol
	if oprot == nil {
		oprot = f.FProtocolFactory.GetProtocol(f.TTransport)
		f.OutputProtocol = oprot
	}
	if err = f.OutputProtocol.WriteRequestHeader(ctx); err != nil {
		return
	}
	f.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, f.SeqId); err != nil {
		return
	}
	args := FooPingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (f *FFooClient) recvPing(ctx frugal.Context) (err error) {
	iprot := f.InputProtocol
	if iprot == nil {
		iprot = f.FProtocolFactory.GetProtocol(f.TTransport)
		f.InputProtocol = iprot
	}
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ping" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
		return
	}
	if f.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
		return
	}
	result := FooPingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Blah the server.
func (f *FFooClient) Blah(ctx frugal.Context, num int32, str string, event *Event) (r int64, err error) {
	if err = f.sendBlah(ctx, num, str, event); err != nil {
		return
	}
	return f.recvBlah(ctx)
}

func (f *FFooClient) sendBlah(ctx frugal.Context, num int32, str string, event *Event) (err error) {
	oprot := f.OutputProtocol
	if oprot == nil {
		oprot = f.FProtocolFactory.GetProtocol(f.TTransport)
		f.OutputProtocol = oprot
	}
	if err = f.OutputProtocol.WriteRequestHeader(ctx); err != nil {
		return
	}
	f.SeqId++
	if err = oprot.WriteMessageBegin("blah", thrift.CALL, f.SeqId); err != nil {
		return
	}
	args := FooBlahArgs{
		Num:   num,
		Str:   str,
		Event: event,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (f *FFooClient) recvBlah(ctx frugal.Context) (r int64, err error) {
	iprot := f.InputProtocol
	if iprot == nil {
		iprot = f.FProtocolFactory.GetProtocol(f.TTransport)
		f.InputProtocol = iprot
	}
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "blah" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "blah failed: wrong method name")
		return
	}
	if f.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "blah failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "blah failed: invalid message type")
		return
	}
	result := FooBlahResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Awe != nil {
		err = result.Awe
		return

	}
	r = result.GetSuccess()
	return
}

func (f *FFooClient) AsyncBlah(ctx frugal.Context, results chan int64, num int32, str string, event *Event) chan error {
	errors := make(chan error, 1)
	if err := f.sendAsyncBlah(ctx, num, str, event); err != nil {
		errors <- err
		return errors
	}
	go func() {
		for {
			result, err := f.recvAsyncBlah(ctx, results)
			if err != nil {
				switch x := err.(type) {
				case thrift.TProtocolException:
					if x.TypeId() != 255 {
						errors <- err
					}
				}
				close(errors)
				close(results)
				return
			}
			results <- result
		}
	}()
	return errors
}

func (f *FFooClient) sendAsyncBlah(ctx frugal.Context, num int32, str string, event *Event) (err error) {
	oprot := f.OutputProtocol
	if oprot == nil {
		oprot = f.FProtocolFactory.GetProtocol(f.TTransport)
		f.OutputProtocol = oprot
	}
	if err = f.OutputProtocol.WriteRequestHeader(ctx); err != nil {
		return
	}
	f.SeqId++
	if err = oprot.WriteMessageBegin("asyncBlah", thrift.CALL, f.SeqId); err != nil {
		return
	}
	args := FooAsyncBlahArgs{
		Num:   num,
		Str:   str,
		Event: event,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (f *FFooClient) recvAsyncBlah(ctx frugal.Context) (r int64, err error) {
	iprot := f.InputProtocol
	if iprot == nil {
		iprot = f.FProtocolFactory.GetProtocol(f.TTransport)
		f.InputProtocol = iprot
	}
	if err = iprot.ReadResponseHeader(ctx); err != nil {
		return
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "asyncBlah" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "asyncBlah failed: wrong method name")
		return
	}
	if f.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "asyncBlah failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "asyncBlah failed: invalid message type")
		return
	}
	result := FooAsyncBlahResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Awe != nil {
		err = result.Awe
		return

	}
	r = result.GetSuccess()
	return
}

type FFooProcessor struct {
	processorMap map[string]frugal.FProcessorFunction
	handler      FFoo
}

func (p *FFooProcessor) GetProcessorFunction(key string) (processor frugal.FProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return
}

func NewFFooProcessor(handler FFoo) *FFooProcessor {
	p := &FFooProcessor{
		handler:      handler,
		processorMap: make(map[string]frugal.FProcessorFunction),
	}
	p.processorMap["ping"] = &fooFPing{handler: handler}
	p.processorMap["blah"] = &fooFBlah{handler: handler}
	p.processorMap["asyncBlah"] = &fooFAsyncBlah{handler: handler}
	return p
}

func (p *FFooProcessor) Process(iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	ctx, err := iprot.ReadRequestHeader()
	if err != nil {
		return false, err
	}
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3
}

type fooFPing struct {
	handler FFoo
}

func (p *fooFPing) Process(ctx frugal.Context, seqId int32, iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	args := FooPingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FooPingResult{}
	var err2 error
	if err2 = p.handler.Ping(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fooFBlah struct {
	handler FFoo
}

func (p *fooFBlah) Process(ctx frugal.Context, seqId int32, iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	args := FooBlahArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("blah", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FooBlahResult{}
	var err2 error
	var retval int64
	if retval, err2 = p.handler.Blah(ctx, args.Num, args.Str, args.Event); err2 != nil {
		switch v := err2.(type) {
		case *AwesomeException:
			result.Awe = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blah: "+err2.Error())
			oprot.WriteMessageBegin("blah", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteResponseHeader(ctx); err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageBegin("blah", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type fooFAsyncBlah struct {
	handler FFoo
}

func (p *fooFAsyncBlah) Process(ctx frugal.Context, seqId int32, iprot, oprot frugal.FProtocol) (success bool, err thrift.TException) {
	args := FooAsyncBlahArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("asyncBlah", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	resultChan := make(chan i64)

	go func() {
		errChan := p.handler.AsyncBlah(ctx, resultChan, args.Num, args.Str, args.Event)
		var err error
		for {
			result := FooAsyncBlahResult{}
			select {
			case r, ok := <-resultChan:
				if !ok {
					x := thrift.NewTProtocolExceptionWithType(255, io.EOF)
					oprot.WriteMessageBegin("asyncBlah", thrift.EXCEPTION, seqId)
					x.Write(oprot)
					oprot.WriteMessageEnd()
					oprot.Flush()
					return
				}
				result.Success = &r
			case err2 := <-errChan:
				switch v := err2.(type) {
				case *AwesomeException:
					result.Awe = v
					err = err2
				default:
					x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing asyncBlah: "+v.Error())
					oprot.WriteMessageBegin("asyncBlah", thrift.EXCEPTION, seqId)
					x.Write(oprot)
					oprot.WriteMessageEnd()
					oprot.Flush()
					return
				}
			}

			if err2 := oprot.WriteResponseHeader(ctx); err2 != nil {
				err = err2
			}
			if err2 = oprot.WriteMessageBegin("asyncBlah", thrift.REPLY, seqId); err2 != nil {
				err = err2
			}
			if err2 = result.Write(oprot); err == nil && err2 != nil {
				err = err2
			}
			if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
				err = err2
			}
			if err2 = oprot.Flush(); err == nil && err2 != nil {
				err = err2
			}
			if err != nil {
				return
			}
		}

	}()
	return true, nil
}
